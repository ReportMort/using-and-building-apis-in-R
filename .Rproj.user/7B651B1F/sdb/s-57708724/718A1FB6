{
    "contents" : "Using and Making APIs in R\n========================================\nauthor: Steve Mortimer\ncss: css-presentations.css\n\n```{r setup, include=FALSE}\n  library(knitr)\n  knitr::opts_chunk$set(echo=TRUE, eval=TRUE)\n```\n\nWhat is an API?\n====================================================\ntype: subsection\n\n<b><u>A</u></b>pplication <b><u>P</u></b>rogramming <b><u>I</u></b>nterface: \n<blockquote cite=\"https://en.wikipedia.org/wiki/Application_programming_interface\">\nexpresses a software component in terms of its operations, inputs, outputs, and \nunderlying types, defining functionalities that are independent of their \nrespective implementations<sup>1</sup></blockquote>\n* It's a contract between systems to facilitate a task \n<br><span style=\"font-size:65%;\">(could be software, hardware, databases, web applications)</span>\n* As Data Consumers we will focus on the specifications of webservice data API calls\n<br>\n<div class=\"footer\">\n<sup>1</sup>&nbsp;&nbsp;Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Application_programming_interface\">https://en.wikipedia.org/wiki/Application_programming_interface</a>\n</div>\n\n2 Common Webservice API Types\n====================================\n\n<div class=\"footer2\">\n<blockquote cite=\"\">\n<b>Resources:</b><br>\n<a href=\"http://spf13.com/post/soap-vs-rest\">The Difference Between SOAP and REST</a><br>\n<a href=\"http://www.soapui.org/testing-dojo/world-of-api-testing/soap-vs--rest-challenges.html\">SOAP vs REST Challenges</a>\n</blockquote>\n</div>\n\n<div class=\"column column1 slideContent\">\n<span style=\"color:red\">SOAP</span><br>\n<span style=\"font-size:65%;\"><b><u>S</u></b>imple <b><u>O</u></b>bject <b><u>A</u></b>ccess <b><u>P</u></b>rotocol</span> \n<ul>\n<li>Protocol agnostic <br><span style=\"font-size:60%;\">(HTTP, SMTP, TCP, or JMS)</span></li>\n<li>Typically XML</li>\n<li>Strongly Typed</li>\n<li>Definitions provided by WSDL <span style=\"font-size:55%;\">(<b><u>W</u></b>eb <b><u>S</u></b>ervice <b><u>D</u></b>escription <b><u>L</u></b>anguage)</span></li>\n</ul>\n</div><br>\n\n<div class=\"column column2 slideContent\">\n<span style=\"color:red\">REST</span><br>\n<span style=\"font-size:65%;\"><b><u>Re</u></b>presentational <b><u>S</u></b>tate <b><u>T</u></b>ransfer</span>\n<ul>\n<li>Noun-Verb Paradigm <br><span style=\"font-size:60%;\">(HTTP GET/POST/PUT/DELETE)</span></li>\n<li>Typically formatted as JSON <span style=\"font-size:55%;\">(<b><u>J</u></b>ava<b><u>s</u></b>cript <b><u>O</u></b>bject <b><u>N</u></b>otation)</span></li>\n</ul>\n</div><br>\n\n\nDiagramming SOAP vs. REST Services\n====================================================\n<div class=\"midcenter\" style=\"margin-left:-410px; margin-top:-255px; width:103%;\">\n  <img style=\"width:100%;\" src=\"http://downloads.eviware.s3.amazonaws.com/web_site_images/soapui/web_images/Dojo/REST_vs_Soap.png\" alt=\"soap-v-rest-diagram\">\n</div><br>\n<div class=\"footer\">\n&nbsp;&nbsp;Image from: <a href=\"http://spf13.com/post/soap-vs-rest\">http://spf13.com/post/soap-vs-rest</a>\n</div>\n\n\n2 Common API Data Formats\n====================================\n<span style=\"color:red\">XML</span>\n```{r, echo=FALSE, eval=TRUE}\nlibrary(XML)\na = newXMLNode(\"person\",\n               newXMLNode(\"firstname\", \"Rick\"),\n               newXMLNode(\"lastname\", \"James\"),\n               newXMLNode(\"occupation\", \"legend\")\n               )\na\n```\n<ul>\n<li>Favored by SOAP APIs</li>\n<li>Traditional format</li>\n</ul>\n***\n<span style=\"color:red\">JSON</span>\n```{r, echo=FALSE, eval=TRUE}\nlibrary(RJSONIO)\na <- list(person=list(firstname=\"Rick\", \n                      lastname=\"James\", \n                      occupation=\"legend\"))\ncat(RJSONIO::toJSON(a, pretty=T))\n```\n<ul>\n<li>Favored by REST APIs</li>\n<li>A more modern, flexible approach</li>\n</ul>\n\n\ntransition-to-using-api\n====================================================\ntitle: false\n<h3>\n  <div class=\"midcenter\" style=\"margin-left:-400px; margin-top:-300px;\">\n  </br></br></br><span style=\"font-weight: 700; color:#25679E;\">Next: </span><br>Using APIs from R\n  </div>\n</h3>\n\nUsing an XML API\n====================================\n<div class=\"footer\">\n&nbsp;&nbsp;The Open Movie Database API at: <a href=\"http://www.omdbapi.com/\">http://www.omdbapi.com/</a>\n</div> \n\n```{r, echo=TRUE, eval=TRUE}\n# Find a movie by title (\"The Godfather\")\nlibrary(XML);library(RCurl)\ndata <- RCurl::getURL(paste0('http://www.omdbapi.com/', \n                             '?t=The+Godfather&plot=short&r=xml'))\nsubstring(data,1,250)\nformatted_xml <- xmlParse(data)\nxml_to_list <- xmlToList(formatted_xml)\nhead(xml_to_list$movie)\n```\n\nUsing an XML API with httr and xml2\n====================================\n```{r, echo=TRUE, eval=TRUE}\nlibrary(xml2);library(httr) # you could also use Hadley's packages\nresp <- httr::GET(paste0('http://www.omdbapi.com/', \n                             '?t=The+Godfather&plot=short&r=xml'))\nresp\nparsed_xml <- read_xml(content(resp, as=\"raw\"))\nparsed_xml\n```\n\nUsing an XML API\n====================================\n```{r, echo=TRUE, eval=TRUE}\n# Search all movies by a title (\"The Godfather\")\ndata <- getURL('http://www.omdbapi.com/?s=The+Godfather&r=xml')\nformatted_xml <- xmlParse(data)\nxmlAttrs(xmlChildren(formatted_xml)$root)\n# find all \"result\" elements\nparsed_movie_elements <- xpathSApply(formatted_xml, \"//result\")\nhead(parsed_movie_elements, 2)\n```\n\nParsing XML to data.frame\n====================================\n```{r, echo=TRUE, eval=TRUE}\nlibrary(plyr)\nxml_to_df <- ldply(parsed_movie_elements, .fun=function(x){\n                t(as.data.frame(xmlToList(x)))\n              }, .id=NULL)\nhead(xml_to_df[c('title', 'year', 'imdbID', 'type')])\n```\n\nUsing an JSON API\n====================================\n```{r, echo=TRUE, eval=TRUE}\nlibrary(rjson)\ndata <- getURL('http://www.omdbapi.com/?s=The+Godfather&r=json')\nsubstring(data,1,250)\njson_to_df <- ldply(rjson::fromJSON(data)$Search, function(x) as.data.frame(x))\nhead(json_to_df[c('Title', 'Year', 'imdbID', 'Type')])\n```\n\ntransition-to-bulding-api\n====================================================\ntitle: false\n<h3>\n  <div class=\"midcenter\" style=\"margin-left:-400px; margin-top:-300px;\">\n  </br></br></br><span style=\"font-weight: 700; color:#25679E;\">Next: </span><br>Building an API with<br>R & OpenCPU\n  </div>\n</h3>\n\nAn Outline to Creating API with OpenCPU\n====================================================\n1. Build a Model\n2. Write Scoring Logic\n3. Save Model and Scoring Function by building as an R package\n4. Push your code to Github\n5. Add the OpenCPU Webhook to host your model as an API\n\nJump Start by Forking a Repo: https://github.com/ReportMort/pothole\n\nRepo background: https://public.opencpu.org/ocpu/github/ReportMort/pothole/www/\n\nStep 1: Build Model\n====================================================\n<div class=\"footer\">\n&nbsp;&nbsp;Full Script Available at: <a href=\"https://github.com/ReportMort/pothole/blob/master/inst/pothole/createmodel.R\">https://github.com/ReportMort/pothole/blob/master/inst/pothole/createmodel.R</a>\n</div> \n```{r, echo=TRUE, eval=FALSE}\noptions(stringsAsFactors=FALSE);library(forecast);library(rjson);library(lubridate)\n\n# load historical data\njson_data <- rjson::fromJSON(paste0('http://dashboard.edmonton.ca/',\n                                    'resource/i3wp-57z9.json') \nformatted_data <- ldply(json_data, .fun = function(x) as.data.frame(x))\ndat <- as.data.frame(lapply(formatted_data, function(x) type.convert(x, as.is=T)))\ndat <- dat[order(dat$datetime),]\n\n# convert to time series\ndat$report_month <- match(gsub(' ', '', dat$report_month), month.name)\ntime_series <- ts(data=dat$number_of_potholes, \n                  start=c(head(dat$report_year,1), head(dat$report_month,1)), \n                  end=c(tail(dat$report_year,1), tail(dat$report_month,1)), \n                  frequency=12)\n\n# build model\npothole_model <- ets(time_series, lambda=.0001)\npothole_data <- dat[,c('report_year', 'report_month', 'number_of_potholes')]\npothole_data$month_as_date <- as.Date(ymd(paste0(pothole_data$report_year,\n                                             '-', pothole_data$report_month, \n                                             '-01'))))\n\n# save models\nsave(file='./data/pothole_model.rda', list=c('pothole_model'))\nsave(file='./data/pothole_data.rda', list=c('pothole_data'))\n```\n\nStep 2: Write Scoring Logic\n====================================================\n<div class=\"footer\">\n&nbsp;&nbsp;Full Script Available at: <a href=\"https://github.com/ReportMort/pothole/blob/master/R/pothole_predict.R\">https://github.com/ReportMort/pothole/blob/master/R/pothole_predict.R</a>\n</div> \n\n```{r, echo=TRUE, eval=FALSE}\n#' Potholes Filled Prediction Function\n#' \n#' Simple ets model and the forecast function to predict potholes filled\n#' \n#' @importFrom forecast forecast\n#' @importFrom lubridate floor_date ymd %m+%\n#' @importFrom zoo coredata\n#' @param input data passed on as \\code{h} to \\code{\\link{forecast}}\n#' @examples\n#' \\dontrun{\n#'    pothole_predict(data.frame(month='2016-01-01'))\n#' }\n#' @export\npothole_predict <- function(input){\n\n  # load input data (can either be csv file or data.frame)\n  newdat <- if(is.character(input) && file.exists(input)){\n              read.csv(input, stringsAsFactors=FALSE)\n            } else {\n              as.data.frame(input, stringsAsFactors=FALSE)\n            }\n\n  ...\n  \n  fc <- forecast(pothole_model, h=months_to_forecast)\n```\n\nStep 3: Save Model as Package\n====================================================\n<div class=\"midcenter\" style=\"margin-left:-410px; margin-top:-255px; width:103%;\">\n![building R package](build-as-package.png)\n</div>\n\nStep 4: Push Code to Github\n====================================================\n\nStep 5: Add OpenCPU Webhook\n====================================================\n\nStep 6: Try Out Your API\n====================================================\n\n\nAdditional References\n====================================================\ntype: subsection\n\n* <a href=\"http://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/\">Building an R Package</a>\n\n* <a href=\"https://www.opencpu.org\">OpenCPU</a>\n  * <a href=\"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwiT47r-vrzKAhVG2R4KHT-WAroQjBAIJDAB&url=https%3A%2F%2Fwww.opencpu.org%2Fapps.html&usg=AFQjCNFieqdE9a1tvel0wBtDttQ_LdsLhw&sig2=pzJk9q7buvgj8X12yIa1aw\">Example Apps</a>\n  * <a href=\"https://www.opencpu.org/api.html#api-ci\">Deploying on Public Server</a>\n  * <a href=\"https://www.opencpu.org/api.html#api-json\">Formatting JSON calls to the API</a>\n  \n* Deploying OpenCPU on Personal Server\n  * <a href=\"https://www.virtualbox.org/wiki/Downloads\">Downloading Virtualbox</a>\n  * <a href=\"https://www.vagrantup.com/downloads.html\">Vagrant Download</a>\n  * <a href=\"https://github.com/mitchellh/vagrant-aws\">Vagrant AWS Plugin</a>\n  * <a href=\"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=5&cad=rja&uact=8&ved=0ahUKEwiT47r-vrzKAhVG2R4KHT-WAroQjBAIJjAE&url=https%3A%2F%2Fwww.opencpu.org%2Fdownload.html&usg=AFQjCNE6_UOD_BmO_pg48G-U7Armbo5MUw&sig2=oTt73nHH_K8lr1smIaeSsA\">Instructions to Download and install</a>\n  * <a href=\"http://jeroenooms.github.io/opencpu-manual/opencpu-server.pdf\">Server Manual (helpful for self-hosting)</a>\n\n\n",
    "created" : 1453397074508.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3384316271",
    "id" : "718A1FB6",
    "lastKnownWriteTime" : 1453437360,
    "path" : "~/github-personal/using-and-building-apis-in-R/index.Rpres",
    "project_path" : "index.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_presentation"
}